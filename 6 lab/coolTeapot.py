import math, time
import turtle as t

# 'That moment when you learn how 3d rotations work, just to use it in a shitty python program'
#     -Gengis Kauh, 2020

turtle = t.Turtle()
turtle.speed(100)
turtle.hideturtle()


class cube():
    def __init__(self, size, width, height):
        s = (size * 10)

        self.verts = [
            [1.000000, 1.000000, -1.000000], [1.000000, -1.000000, -1.000000], [1.000000, 1.000000, 1.000000],
            [1.000000, -1.000000, 1.000000], [-1.000000, 1.000000, -1.000000], [-1.000000, -1.000000, -1.000000],
            [-1.000000, 1.000000, 1.000000], [-1.000000, -1.000000, 1.000000], [1.000000, -1.000000, 0.400000],
            [1.000000, -1.000000, -0.400000], [1.000000, 0.200000, 0.400000], [1.000000, 0.200000, -0.400000],
            [1.000000, 2.000000, -0.038346], [1.000000, 2.000000, 0.038346], [-1.000000, 2.000000, -0.038346],
            [-1.000000, 2.000000, 0.038346], [-0.624934, -0.420866, 1.000000], [-0.624934, 0.420866, 1.000000],
            [0.624934, 0.420866, 1.000000], [0.624934, -0.420866, 1.000000]
        ]

        self.face = [
            [[7, 8, 17, 18], [8, 7, 5, 6], [6, 2, 10, 9, 4, 8], [2, 1, 3, 4, 9, 11, 12, 10], [6, 5, 1, 2],
             [10, 12, 11, 9], [1, 5, 15, 13], [7, 3, 14, 16], [14, 13, 15, 16], [1, 13, 14, 3], [7, 16, 15, 5],
             [20, 19, 18, 17], [8, 4, 20, 17], [3, 7, 18, 19], [4, 3, 19, 20]]
        ]


class custom():
    def __init__(self, verts, faces):
        self.face = faces
        self.verts = verts


shapes = [custom([
    [-0.215603, 2.402086, -1.381342], [-1.250116, 2.401747, -0.637302], [0.621636, 2.401541, -1.261806],
    [1.203936, 2.401433, -0.750220], [1.387315, 2.401625, 0.202905], [1.006595, 2.401486, 0.984811],
    [0.232676, 2.401647, 1.382956], [-0.621636, 2.401541, 1.261807], [-1.203936, 2.401432, 0.750221],
    [-1.392200, 2.401351, -0.121271], [-0.961905, 2.400997, -1.029833], [-1.260290, 2.499827, -0.660458],
    [-0.621338, 2.503236, -1.252297], [1.010263, 2.499720, -1.004126], [1.245484, 2.503170, 0.644194],
    [-1.010263, 2.499720, 1.004127], [-1.395872, 2.503621, 0.229340], [0.235484, 2.503565, -1.394941],
    [1.395872, 2.503621, -0.229340], [0.653554, 2.503411, 1.268135], [-0.235486, 2.503563, 1.394941],
    [-1.374587, 1.394905, 1.360726], [-1.712621, 1.411953, -0.888143], [-0.896617, 1.424285, -1.707992],
    [1.367593, 1.404755, -1.367594], [1.712620, 1.411956, 0.888143], [0.010458, 0.887653, 2.007525],
    [-0.451831, 1.108890, 1.965889], [-0.254258, 0.577496, 1.911680], [-2.004007, 0.895441, 0.333058],
    [0.333058, 0.895441, -2.004007], [2.004007, 0.895440, -0.333058], [0.879208, 0.906946, 1.839970],
    [0.339854, 0.649886, 1.926492], [-1.400074, 0.660737, 1.377621], [-1.745676, 0.673675, -0.919463],
    [-0.917592, 0.638727, -1.729537], [1.389817, 0.661195, -1.389816], [1.733438, 0.651765, 0.931953],
    [1.455239, 0.105523, -0.241940], [0.721938, 0.130154, 1.311113], [1.240383, 0.048083, 0.660260],
    [-0.236372, 0.086639, 1.421967], [-0.991908, 0.055610, 1.004226], [-1.455239, 0.105523, 0.241940],
    [-0.673666, 0.091160, -1.280177], [-1.223848, 0.028735, -0.637488], [0.241940, 0.105523, -1.455238],
    [0.991908, 0.055611, -1.004226], [0.142711, 3.148659, -0.142719], [0.111786, 3.147191, 0.176279],
    [-0.207765, 3.161276, -0.033188], [0.136850, 2.981393, -0.308557], [0.331251, 2.981731, 0.134443],
    [-0.136823, 2.981387, 0.308575], [-0.331246, 2.981723, -0.134458], [-0.098480, 2.748604, -0.155503],
    [0.098479, 2.748605, 0.155496], [-0.184904, 2.627857, -0.444108], [0.155956, 2.718917, -0.074824],
    [0.184903, 2.627856, 0.444114], [-0.155952, 2.718917, 0.074830], [-0.758177, 2.403531, 1.078636],
    [-1.062218, 2.408058, 0.805632], [-1.096112, 2.408316, -0.761793], [-0.768106, 2.408064, -1.089722],
    [0.377451, 2.408610, -1.280634], [0.758177, 2.403531, -1.078636], [1.062218, 2.408059, -0.805631],
    [1.096112, 2.408315, 0.761793], [0.768106, 2.408064, 1.089723], [-0.377451, 2.408609, 1.280635],
    [-1.280635, 2.408609, 0.377452], [-1.298944, 2.400081, -0.222421], [-0.222421, 2.400082, -1.298944],
    [1.280635, 2.408609, -0.377451], [1.298944, 2.400081, 0.222421], [0.222421, 2.400081, 1.298945],
    [0.013046, 2.029410, 1.600139], [0.164805, 2.063189, 1.584807], [0.223426, 2.158581, 1.539614],
    [0.186373, 2.171414, 2.594490], [0.084146, 2.242891, 1.500547], [-0.105744, 1.569409, 2.962372],
    [-0.002274, 0.581923, 1.907674], [0.189506, 0.851241, 2.304899], [0.069996, 1.167328, 2.762963],
    [0.163814, 1.983141, 2.934034], [-0.109450, 2.050614, 2.923849], [0.155058, 1.705849, 2.968337],
    [0.144000, 0.631200, 1.910400], [0.219530, 1.369258, 2.786948], [0.229766, 2.014682, 2.777426],
    [0.181767, 1.866608, 2.753996], [0.216002, 1.296282, 2.622278], [0.226725, 0.721549, 1.939159],
    [0.150260, 0.862422, 1.989661], [0.147442, 1.146261, 2.419660], [0.156126, 1.997506, 2.551800],
    [0.091535, 1.643328, 2.695540], [-0.168125, 0.852287, 1.985675], [-0.158220, 0.630132, 1.914939],
    [-0.197985, 0.982973, 2.494071], [-0.210911, 1.287164, 2.752121], [-0.094197, 2.212219, 2.581642],
    [-0.162611, 2.227786, 1.512696], [-0.222418, 2.099553, 2.657481], [-0.242821, 2.133099, 1.550923],
    [-0.204867, 1.224298, 2.536093], [-0.223539, 1.881756, 2.889383], [-0.174878, 1.992247, 2.569089],
    [-0.073316, 1.341970, 2.547502], [-0.163534, 1.844523, 2.744845], [-0.149597, 2.056311, 1.588391],
    [0.117440, 1.401842, -1.701827], [0.476832, 1.202680, -1.699683], [0.334553, 0.682510, -1.698158],
    [-0.298474, 0.662626, -1.698986], [-0.257569, 0.831944, -2.251455], [-0.170359, 1.143327, -2.574578],
    [0.043528, 1.990705, -2.867093], [0.039205, 2.261922, -3.086262], [-0.007461, 2.477896, -3.455284],
    [-0.007489, 2.446369, -3.177285], [0.311941, 1.248229, -2.558761], [0.192890, 0.788483, -2.264905],
    [0.176246, 2.462992, -3.230685], [0.190671, 2.155031, -2.817885], [0.438747, 0.957318, -2.169090],
    [0.437815, 1.286808, -2.394467], [0.073443, 2.404985, -3.152913], [0.162284, 2.378345, -2.756143],
    [0.383016, 1.416495, -2.327848], [0.229778, 1.588792, -2.329021], [0.085226, 2.403028, -2.849746],
    [-0.302095, 1.412353, -2.062052], [0.086058, 2.061105, -2.479522], [-0.056113, 2.327703, -2.601414],
    [-0.008612, 2.394221, -2.811923], [-0.118935, 2.397073, -3.034734], [-0.145603, 2.466917, -3.304621],
    [-0.179946, 2.132860, -2.832885], [-0.484884, 0.830648, -1.701795], [-0.405044, 1.187367, -2.440454],
    [-0.440096, 1.286717, -2.351984], [-0.170555, 2.392995, -2.813188], [-0.365530, 1.333843, -1.699688],
    [-0.281390, 1.599237, -2.354298], [-0.080906, 2.452280, -2.864255]
],

    [
        [[12, 2, 11], [15, 20, 26], [16, 9, 17], [17, 12, 23], [4, 5, 19], [5, 6, 15], [6, 7, 20], [17, 10, 12],
         [7, 8, 21], [18, 3, 14], [13, 18, 24], [9, 10, 17], [20, 7, 21], [11, 1, 13], [16, 17, 22], [19, 5, 15],
         [14, 19, 25], [26, 32, 19], [22, 28, 21], [35, 28, 22], [25, 31, 18], [25, 32, 38], [30, 36, 45], [33, 39, 26],
         [27, 33, 28], [24, 31, 37], [31, 38, 48], [45, 44, 35], [32, 39, 40], [28, 35, 29], [27, 34, 33], [34, 29, 41],
         [33, 34, 41], [48, 46, 37], [40, 49, 38], [39, 41, 42], [34, 27, 29], [41, 29, 43], [44, 45, 47], [49, 40, 42],
         [54, 60, 53], [42, 44, 47], [56, 62, 55], [55, 62, 58], [55, 58, 54], [49, 42, 47], [56, 57, 62], [51, 50, 52],
         [54, 58, 60], [53, 60, 57], [62, 57, 59], [62, 61, 58], [60, 59, 57], [62, 73, 64], [61, 72, 71], [59, 67, 66],
         [60, 76, 69], [77, 76, 70], [63, 72, 64], [74, 73, 65], [78, 71, 72], [75, 66, 67], [68, 67, 69], [1, 18, 13],
         [149, 140, 141], [92, 95, 94], [105, 82, 83], [90, 84, 87], [86, 87, 85], [88, 82, 89], [108, 107, 106],
         [92, 87, 86], [92, 86, 95], [91, 96, 86], [83, 106, 105], [93, 82, 88], [86, 96, 95], [99, 79, 80],
         [100, 94, 95], [98, 95, 96], [99, 93, 94], [98, 96, 97], [81, 83, 82], [100, 95, 98], [97, 27, 98],
         [100, 113, 94], [123, 124, 131], [117, 118, 126], [98, 109, 112], [101, 98, 27], [102, 103, 101], [85, 91, 86],
         [103, 87, 104], [92, 94, 93], [99, 80, 93], [84, 110, 104], [89, 105, 107], [127, 123, 131], [110, 89, 107],
         [114, 111, 107], [107, 111, 110], [101, 103, 109], [104, 109, 103], [109, 104, 110], [113, 110, 111],
         [112, 109, 110], [112, 110, 113], [101, 109, 98], [100, 98, 112], [99, 94, 113], [115, 116, 133],
         [116, 130, 133], [117, 126, 129], [135, 127, 131], [125, 120, 121], [122, 123, 127], [128, 122, 127],
         [128, 121, 122], [125, 121, 128], [129, 126, 125], [130, 125, 128], [132, 135, 149], [132, 128, 127],
         [130, 128, 132], [130, 129, 125], [133, 130, 132], [138, 132, 149], [134, 133, 132], [134, 132, 137],
         [146, 138, 149], [137, 132, 138], [115, 133, 134], [136, 115, 134], [115, 136, 147], [29, 27, 28], [14, 4, 19],
         [15, 6, 20], [139, 140, 149], [12, 11, 13], [140, 123, 141], [141, 123, 122], [141, 122, 142], [142, 122, 121],
         [142, 121, 120], [143, 119, 118], [119, 143, 144], [144, 120, 119], [142, 120, 144], [145, 144, 143],
         [146, 144, 145], [146, 142, 144], [146, 141, 142], [149, 141, 146], [145, 143, 147], [136, 145, 147],
         [148, 145, 136], [148, 146, 145], [138, 146, 148], [137, 138, 148], [140, 124, 123], [21, 8, 16], [1, 3, 18],
         [14, 3, 4], [16, 8, 9], [15, 26, 19], [12, 10, 2], [16, 22, 21], [30, 17, 23], [14, 25, 18], [20, 33, 26],
         [22, 17, 30], [36, 23, 24, 37], [30, 35, 22], [24, 18, 31], [25, 19, 32], [26, 39, 32], [23, 36, 30],
         [30, 45, 35], [44, 43, 29, 35], [25, 38, 31], [32, 40, 38], [33, 41, 39], [43, 44, 42, 41], [31, 48, 37],
         [48, 38, 49], [40, 39, 42], [47, 36, 37, 46], [45, 36, 47], [48, 49, 47, 46], [52, 50, 53, 56],
         [59, 65, 73, 62], [54, 53, 50], [57, 56, 53], [55, 54, 51], [55, 51, 52], [56, 55, 52], [54, 50, 51],
         [76, 60, 61, 70], [58, 61, 60], [61, 71, 70], [72, 61, 62, 64], [59, 66, 65], [67, 59, 60, 69],
         [80, 81, 82, 93], [82, 105, 89], [84, 90, 88, 89], [105, 106, 107], [92, 93, 88, 90], [90, 87, 92],
         [103, 85, 87], [114, 79, 99, 111], [100, 112, 113], [129, 130, 116, 117], [111, 99, 113], [103, 102, 85],
         [104, 87, 84], [110, 84, 89], [126, 118, 119], [114, 107, 108], [12, 13, 24, 23], [119, 120, 126],
         [137, 148, 136, 134], [120, 125, 126], [28, 33, 20, 21], [132, 127, 135], [135, 139, 149]]
    ]
)]  # remove ] and replace with comma to add back the props

for x in range(0, len(shapes)):
    for s in range(0, len(shapes[x].verts)):
        for f in range(0, len(shapes[x].verts[s])):
            shapes[x].verts[s][f] = shapes[x].verts[s][f] * 70


# You can make a cube by using the "cube(size)" command,
# Replace size with any number


def rotateZ(theta):
    for shape in range(0, len(shapes)):
        sinTheata = math.sin(theta)
        cosTheata = math.cos(theta)
        for x in range(0, len(shapes[shape].verts)):
            vert = shapes[shape].verts[x]
            x = vert[0]
            y = vert[1]
            vert[0] = x * cosTheata - y * sinTheata
            vert[1] = y * cosTheata + x * sinTheata


def rotateX(theta):
    for shape in range(0, len(shapes)):
        sinTheata = math.sin(theta)
        cosTheata = math.cos(theta)
        for x in range(0, len(shapes[shape].verts)):
            vert = shapes[shape].verts[x]
            y = vert[1]
            z = vert[2]
            vert[1] = y * cosTheata - z * sinTheata
            vert[2] = z * cosTheata + y * sinTheata


def rotateY(theta):
    for shape in range(0, len(shapes)):
        sinTheata = math.sin(theta)
        cosTheata = math.cos(theta)
        for x in range(0, len(shapes[shape].verts)):
            vert = shapes[shape].verts[x]
            x = vert[0]
            z = vert[2]
            vert[0] = x * cosTheata + z * sinTheata
            vert[2] = z * cosTheata - x * sinTheata


# turtle.tracer(0, 0)
screen = turtle.getscreen()

## Rendering Past this marker

turtle.color('cyan')
screen.colormode(255)
turtle.pensize(4)


def getKey(item):
    return item[0]


def face(shape):
    verts = shapes[shape].verts
    face = shapes[shape].face
    toggle = 0

    lightLimit = 85

    colList = []

    for e in range(0, len(face[0])):
        avg0 = 0
        avg = 0
        for b in range(0, len(face[0][e])):
            avg0 = avg0 + verts[face[0][e][b] - 1][2]
        avg = (avg0 * 4) / len(face[0][e])

        col = avg

        if col > lightLimit:
            if col >= 255:
                col = 255
            if col <= 0:
                col = 0

            colList.append([col, e])

    colList = sorted(colList, key=getKey)
    e = ''
    for x in range(0, len(colList)):
        turtle.begin_fill()
        turtle.pensize(0.5)
        e = colList[x][1]
        col = colList[x][0]
        turtle.penup()
        edge0 = verts[face[0][e][0] - 1]
        for b in range(0, len(face[0][e])):
            edge = verts[face[0][e][b] - 1]
            turtle.goto(edge[0], edge[1])
        turtle.goto(edge0[0], edge0[1])
        turtle.color((int(col), int(col), int(col)))
        turtle.end_fill()


def wire(shape):
    verts = shapes[shape].verts
    face = shapes[shape].face
    toggle = 0

    for x in range(0, len(face)):
        for e in range(0, len(face[x])):
            edge0 = verts[face[x][e][0] - 1] * 5
            turtle.penup()
            for b in range(0, len(face[x][e])):
                edge = verts[face[x][e][b] - 1]
                turtle.color('red')
                turtle.goto(edge[0], edge[1])
                turtle.dot(5)
                turtle.pendown()
            turtle.goto(edge0[0], edge0[1])


maxFace = (len(shapes[0].face[0]) / 2) * 2


def limited(shape):
    verts = shapes[shape].verts
    face = shapes[shape].face
    toggle = 0
    used = []
    turtle.penup()
    for x in range(0, len(face)):
        for e in range(0, maxFace):
            edge0 = verts[face[x][e][0] - 1]
            avg0 = 0
            avg = 0
            for b in range(0, len(face[x][e])):
                avg0 = avg0 + verts[face[x][e][b] - 1][2]

            avg = (avg0 * 4) / len(face[x][e])

            col = avg
            if col >= 255:
                col = 255
            if col <= 0:
                col = 0

            if col < 100:
                pass
            else:
                turtle.begin_fill()
                for b in range(0, len(face[x][e])):
                    edge = verts[face[x][e][b] - 1]
                    turtle.goto(edge[0], edge[1])
                turtle.goto(edge0[0], edge0[1])
                turtle.color((col, col, col))
                turtle.end_fill()


frame = 0
render = 1

rotateZ(0.01)
rotateX(0.01)

RENDER_MODE = 'face'  # modes are: wire, face, mix, limited

if RENDER_MODE == 'face' or RENDER_MODE == 'limited':
    screen.bgcolor('black')
else:
    screen.bgcolor('white')

while True:
    if render == 1:
        frame = frame + 1
        for shape in range(0, len(shapes)):

            if RENDER_MODE == 'wire':
                wire(shape)

            if RENDER_MODE == 'face':
                turtle.penup()
                face(shape)

            if RENDER_MODE == 'mix':
                turtle.color('red')
                face(shape)
                turtle.color('cyan')
                wire(shape)

            if RENDER_MODE == 'limited':
                limited(shape)

    rotateX(0.00154)
    # rotateZ(0.01)
    rotateY(0.015)

    turtle._update()
    turtle.clear()
